// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v3.14.0
// source: proto/notebook.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "notebook";

export interface UserRespone {
  id: number;
  username: string;
}

export interface CreateUserDto {
  username: string;
  password: string;
}

export interface UsersListResponse {
  users: UserRespone[];
}

export interface FindUserRequest {
  id: number;
}

export interface PostResponse {
  id: number;
  title: string;
  content: string;
  /** Вложенный пользователь */
  user: UserRespone | undefined;
}

export interface CreatePostDto {
  title: string;
  content: string;
  userId: number;
}

export interface PostsListResponse {
  posts: PostResponse[];
}

export interface FindPostRequest {
  id: number;
}

export interface Empty {
}

export const NOTEBOOK_PACKAGE_NAME = "notebook";

/** Users */

export interface UserServiceClient {
  getUsers(request: Empty): Observable<UsersListResponse>;

  createUser(request: CreateUserDto): Observable<UserRespone>;

  findUser(request: FindUserRequest): Observable<UserRespone>;

  deleteUser(request: FindUserRequest): Observable<Empty>;
}

/** Users */

export interface UserServiceController {
  getUsers(request: Empty): Promise<UsersListResponse> | Observable<UsersListResponse> | UsersListResponse;

  createUser(request: CreateUserDto): Promise<UserRespone> | Observable<UserRespone> | UserRespone;

  findUser(request: FindUserRequest): Promise<UserRespone> | Observable<UserRespone> | UserRespone;

  deleteUser(request: FindUserRequest): Promise<Empty> | Observable<Empty> | Empty;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getUsers", "createUser", "findUser", "deleteUser"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";

/** Posts */

export interface PostServiceClient {
  getPosts(request: Empty): Observable<PostsListResponse>;

  createPost(request: CreatePostDto): Observable<PostResponse>;

  deletePost(request: FindPostRequest): Observable<Empty>;
}

/** Posts */

export interface PostServiceController {
  getPosts(request: Empty): Promise<PostsListResponse> | Observable<PostsListResponse> | PostsListResponse;

  createPost(request: CreatePostDto): Promise<PostResponse> | Observable<PostResponse> | PostResponse;

  deletePost(request: FindPostRequest): Promise<Empty> | Observable<Empty> | Empty;
}

export function PostServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getPosts", "createPost", "deletePost"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("PostService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("PostService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const POST_SERVICE_NAME = "PostService";
